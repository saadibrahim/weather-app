{"version":3,"sources":["app/reducers/forecast.js","app/actions/types.js","app/reducers/index.js","app/store/index.js","app/constants/client.js","app/helpers/api.js","app/actions/forecast.js","app/helpers/data.js","app/helpers/units.js","app/selectors/forecast.js","app/components/BarChart/index.js","app/components/Error/index.js","app/components/Loader/index.js","app/components/Pagination/index.js","app/components/Title/index.js","app/components/UnitsToggle/index.js","app/components/WeatherCard/index.js","app/containers/Home/window.js","app/containers/Home/index.js","app/App.js","serviceWorker.js","index.js"],"names":["forecast","state","fetching","data","error","units","page","action","type","produce","draft","rootReducer","combineReducers","middleware","thunk","composedEnhancers","composeWithDevTools","applyMiddleware","store","createStore","ENVIRONMENT","api","create","baseURL","addRequestTransform","request","params","addMonitor","response","CLIENT","console","log","url","config","detail","dispatch","apiHelper","get","q","then","ok","problem","message","createDateWiseObjWithAvg","items","dateWiseObj","forEach","item","celsius","dateTime","dt_txt","split","date","list","push","time","temp","main","datesObj","Object","values","dayObj","avgTemp","reduce","total","timeSlot","length","addAverages","getSinglePageResults","pageNumber","slice","getForecast","getForecastData","getForecastList","dateWiseList","createSelector","city","dateWiseObjWithAvg","totalPages","Math","ceil","results","forecastData","BarChart","Box","mb","Paper","valueField","argumentField","color","text","Error","Typography","gutterBottom","Loader","display","justifyContent","alignItems","minHeight","CircularProgress","Pagination","onChangePage","onCardSelection","my","Button","variant","onClick","disabled","Title","component","UnitsToggle","toggleDisplayUnits","ButtonGroup","disableElevation","useStyles","makeStyles","card","cursor","WeatherCard","selectedCard","classes","Grid","key","xs","sm","Link","className","underline","Card","raised","CardContent","toFixed","Home","useState","Container","maxWidth","name","country","container","spacing","map","find","this","props","Component","connect","forecastSelectors","forecastActions","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b0fa55fe.chunk.js","sourcesContent":["import { produce } from \"immer\";\nimport {\n  FORECAST_FETCH_START,\n  FORECAST_FETCH_SUCCESS,\n  FORECAST_FETCH_FAILURE,\n  FORECAST_TOGGLE_DISPLAY_UNITS,\n  FORECAST_CHANGE_PAGE,\n} from \"../actions/types\";\n\nconst forecast = (\n  state = {\n    fetching: false,\n    data: {},\n    error: null,\n    units: \"metric\",\n    page: 1,\n  },\n  action\n) => {\n  switch (action.type) {\n    case FORECAST_FETCH_START:\n      return produce(state, (draft) => {\n        draft.fetching = true;\n      });\n    case FORECAST_FETCH_SUCCESS:\n      return produce(state, (draft) => {\n        draft.fetching = false;\n        draft.data = action.data;\n      });\n    case FORECAST_FETCH_FAILURE:\n      return produce(state, (draft) => {\n        draft.fetching = false;\n        draft.error = action.error;\n      });\n    case FORECAST_TOGGLE_DISPLAY_UNITS:\n      return produce(state, (draft) => {\n        draft.units = state.units === \"metric\" ? \"imperial\" : \"metric\";\n      });\n    case FORECAST_CHANGE_PAGE:\n      return produce(state, (draft) => {\n        draft.page = action.page;\n      });\n    default:\n      return state;\n  }\n};\n\nexport default forecast;\n","// Actions relating to users\nexport const FORECAST_FETCH_START = \"FORECAST_FETCH_START\";\nexport const FORECAST_FETCH_SUCCESS = \"FORECAST_FETCH_SUCCESS\";\nexport const FORECAST_FETCH_FAILURE = \"FORECAST_FETCH_FAILURE\";\nexport const FORECAST_TOGGLE_DISPLAY_UNITS = \"FORECAST_TOGGLE_DISPLAY_UNITS\";\nexport const FORECAST_CHANGE_PAGE = \"FORECAST_CHANGE_PAGE\";\n","import { combineReducers } from \"redux\";\nimport forecast from \"./forecast\";\n\nconst rootReducer = combineReducers({\n  forecast,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nconst middleware = [thunk];\nconst composedEnhancers = composeWithDevTools(applyMiddleware(...middleware));\n\nconst store = createStore(rootReducer, composedEnhancers);\n\nexport { store };\n","const ENVIRONMENT = process.env.NODE_ENV;\n\nconst IS_PRODUCTION = ENVIRONMENT === \"production\";\n\nconst IS_DEVELOPMENT = ENVIRONMENT === \"development\";\n\nexport default {\n  ENVIRONMENT,\n  IS_PRODUCTION,\n  IS_DEVELOPMENT,\n};\n","import { create } from \"apisauce\";\nimport CLIENT from \"../constants/client\";\n\nconst API_KEY = \"2c05a105987c4b7e90e7ee6ee58222f3\";\n\nconst api = create({\n  baseURL: \"https://api.openweathermap.org/data/2.5/\",\n});\n\napi.addRequestTransform((request) => {\n  request.params[\"APPID\"] = API_KEY;\n});\n\napi.addMonitor((response) => {\n  if (CLIENT.IS_DEVELOPMENT) {\n    console.log({ url: response.config.url, detail: response });\n  }\n});\n\nexport default api;\n","import apiHelper from \"../helpers/api\";\nimport {\n  FORECAST_FETCH_START,\n  FORECAST_FETCH_SUCCESS,\n  FORECAST_FETCH_FAILURE,\n  FORECAST_TOGGLE_DISPLAY_UNITS,\n  FORECAST_CHANGE_PAGE,\n} from \"./types\";\n\nconst getForecast = () => {\n  return (dispatch) => {\n    dispatch({ type: FORECAST_FETCH_START });\n    apiHelper\n      .get(\"forecast\", {\n        q: \"Munich,de\",\n        units: \"metric\",\n      })\n      .then((response) => {\n        const { data, ok, problem } = response;\n        if (ok) {\n          dispatch({ type: FORECAST_FETCH_SUCCESS, data });\n        } else {\n          let error = data ? data.message : problem;\n          dispatch({ type: FORECAST_FETCH_FAILURE, error });\n        }\n      });\n  };\n};\n\nconst toggleDisplayUnits = () => {\n  return (dispatch) => {\n    dispatch({ type: FORECAST_TOGGLE_DISPLAY_UNITS });\n  };\n};\n\nconst changePage = (page) => {\n  return (dispatch) => {\n    dispatch({ type: FORECAST_CHANGE_PAGE, page });\n  };\n};\n\nexport default { getForecast, toggleDisplayUnits, changePage };\n","import { convertToFahrenheit } from \"./units\";\n\nconst PAGE_SIZE = 3;\n\nexport const addAverages = (dateWiseObj) => {\n  const datesObj = Object.values(dateWiseObj);\n  datesObj.forEach((dayObj) => {\n    dayObj.avgTemp =\n      dayObj.list.reduce((total, timeSlot) => total + timeSlot.temp, 0) /\n      dayObj.list.length;\n  });\n  return datesObj;\n};\n\nexport const createDateWiseObjWithAvg = (items, units) => {\n  const dateWiseObj = [];\n  items.forEach((item) => {\n    let dateTime = item.dt_txt.split(\" \");\n    let date = dateTime[0];\n    if (!dateWiseObj[date]) {\n      dateWiseObj[date] = {\n        date,\n        list: [],\n      };\n    }\n    dateWiseObj[date].list.push({\n      time: dateTime[1],\n      temp:\n        units === \"imperial\"\n          ? convertToFahrenheit(item.main.temp)\n          : item.main.temp,\n    });\n  });\n  return addAverages(dateWiseObj);\n};\n\nexport const getTotalPagesCount = (data) => {\n  return Math.ceil(data.length / PAGE_SIZE);\n};\n\nexport const getSinglePageResults = (data, page) => {\n  const pageNumber = page - 1;\n  return data.slice(pageNumber * PAGE_SIZE, pageNumber * PAGE_SIZE + PAGE_SIZE);\n};\n","export const convertToFahrenheit = (celsius) => {\n  return (celsius * 9) / 5 + 32;\n};\n","import { createSelector } from \"reselect\";\nimport {\n  createDateWiseObjWithAvg,\n  getTotalPagesCount,\n  getSinglePageResults,\n} from \"../helpers/data\";\n\nconst getForecast = (state) => state.forecast;\n\nconst getForecastData = (state) => getForecast(state).data;\n\nconst getForecastUnits = (state) => getForecast(state).units;\n\nconst getForecastPage = (state) => getForecast(state).page;\n\nconst getForecastList = (state) => getForecastData(state).list || [];\n\nconst getForecastCity = (state) => getForecastData(state).city || {};\n\nconst dateWiseList = createSelector(\n  [getForecastList, getForecastCity, getForecastUnits, getForecastPage],\n  (items, city, units, page) => {\n    const dateWiseObjWithAvg = createDateWiseObjWithAvg(items, units);\n\n    return {\n      totalPages: getTotalPagesCount(dateWiseObjWithAvg),\n      results: getSinglePageResults(dateWiseObjWithAvg, page),\n      city,\n    };\n  }\n);\n\nconst getForecastProcessed = (state) => {\n  const forecastData = getForecast(state);\n  return {\n    fetching: forecastData.fetching,\n    data: dateWiseList(state),\n    error: forecastData.error,\n    units: forecastData.units,\n    page: forecastData.page,\n  };\n};\n\nexport default {\n  getForecast,\n  getForecastList,\n  dateWiseList,\n  getForecastProcessed,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Paper, Box } from \"@material-ui/core\";\nimport {\n  Chart,\n  BarSeries,\n  Title,\n  ArgumentAxis,\n  ValueAxis,\n} from \"@devexpress/dx-react-chart-material-ui\";\n\nfunction BarChart({ data }) {\n  return (\n    <Box mb=\"1.5em\">\n      <Paper>\n        <Chart data={data}>\n          <ArgumentAxis />\n          <ValueAxis />\n          <BarSeries valueField=\"temp\" argumentField=\"time\" color=\"#3f51b5\" />\n          <Title text=\"24h temperature\" />\n        </Chart>\n      </Paper>\n    </Box>\n  );\n}\n\nBarChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.number,\n      time: PropTypes.string,\n    })\n  ),\n};\n\nexport default BarChart;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction Error({ message }) {\n  return (\n    <Typography color=\"textSecondary\" gutterBottom>\n      {message}\n    </Typography>\n  );\n}\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Error;\n","import React from \"react\";\nimport { CircularProgress, Box } from \"@material-ui/core\";\n\nexport default function Loader() {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      minHeight=\"100vh\"\n    >\n      <CircularProgress />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Button } from \"@material-ui/core\";\n\nfunction Pagination({ page, totalPages, onChangePage, onCardSelection }) {\n  return (\n    <Box my=\"1.5em\" justifyContent=\"space-between\" display=\"flex\">\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          onCardSelection(null);\n          onChangePage(page - 1);\n        }}\n        disabled={page === 1}\n      >\n        &lt;\n      </Button>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          onCardSelection(null);\n          onChangePage(page + 1);\n        }}\n        disabled={page === totalPages}\n      >\n        &gt;\n      </Button>\n    </Box>\n  );\n}\n\nPagination.propTypes = {\n  page: PropTypes.number.isRequired,\n  totalPages: PropTypes.number.isRequired,\n  onCardSelection: PropTypes.func.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction Title({ text }) {\n  return (\n    <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n      {text}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, ButtonGroup, Button } from \"@material-ui/core\";\n\nfunction UnitsToggle({ toggleDisplayUnits, units }) {\n  return (\n    <Box mb=\"1em\">\n      <ButtonGroup disableElevation variant=\"contained\" color=\"primary\">\n        <Button onClick={toggleDisplayUnits} disabled={units === \"metric\"}>\n          &deg;C\n        </Button>\n        <Button onClick={toggleDisplayUnits} disabled={units === \"imperial\"}>\n          &deg;F\n        </Button>\n      </ButtonGroup>\n    </Box>\n  );\n}\n\nUnitsToggle.propTypes = {\n  units: PropTypes.oneOf([\"metric\", \"imperial\"]).isRequired,\n  toggleDisplayUnits: PropTypes.func.isRequired,\n};\n\nexport default UnitsToggle;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Link, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  card: {\n    cursor: \"pointer\",\n  },\n});\n\nfunction WeatherCard({ item, selectedCard, units, onCardSelection }) {\n  const classes = useStyles();\n\n  return (\n    <Grid key={item.date} item xs={6} sm={4}>\n      <Link\n        className={classes.card}\n        underline=\"none\"\n        onClick={() => onCardSelection(item.date)}\n      >\n        <Card\n          raised={selectedCard && item.date === selectedCard ? true : false}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              {item.date}\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\" color=\"primary\">\n              {item.avgTemp.toFixed(1)} &deg;\n              {units === \"metric\" ? \"C\" : \"F\"}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Link>\n    </Grid>\n  );\n}\n\nWeatherCard.propTypes = {\n  units: PropTypes.oneOf([\"metric\", \"imperial\"]).isRequired,\n  onCardSelection: PropTypes.func.isRequired,\n  selectedCard: PropTypes.string,\n  item: PropTypes.shape({\n    avgTemp: PropTypes.number,\n    date: PropTypes.string,\n    list: PropTypes.arrayOf(\n      PropTypes.shape({\n        temp: PropTypes.number,\n        time: PropTypes.string,\n      })\n    ),\n  }).isRequired,\n};\n\nexport default WeatherCard;\n","import React, { useState } from \"react\";\nimport { Container, Grid, Box } from \"@material-ui/core\";\nimport {\n  BarChart,\n  Error,\n  Loader,\n  Pagination,\n  Title,\n  UnitsToggle,\n  WeatherCard,\n} from \"../../components\";\n\nexport default function Home({ forecast, toggleDisplayUnits, onChangePage }) {\n  const { fetching, data, error, units, page } = forecast;\n  const [selectedCard, onCardSelection] = useState(null);\n\n  if (fetching) {\n    return <Loader />;\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      {error ? (\n        <Error message={error} />\n      ) : (\n        <>\n          <Title\n            text={`Weather forecast for ${data.city.name}, ${data.city.country}`}\n          />\n\n          <UnitsToggle toggleDisplayUnits={toggleDisplayUnits} units={units} />\n\n          <Pagination\n            page={page}\n            totalPages={data.totalPages}\n            onChangePage={onChangePage}\n            onCardSelection={onCardSelection}\n          />\n\n          <Box mb=\"1.5em\">\n            <Grid container spacing={2}>\n              {data.results.map((item) => {\n                return (\n                  <WeatherCard\n                    key={item.date}\n                    item={item}\n                    selectedCard={selectedCard}\n                    units={units}\n                    onCardSelection={onCardSelection}\n                  />\n                );\n              })}\n            </Grid>\n          </Box>\n\n          {selectedCard && (\n            <BarChart\n              data={\n                data.results.find((item) => item.date === selectedCard).list\n              }\n            />\n          )}\n        </>\n      )}\n    </Container>\n  );\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport forecastActions from \"../../actions/forecast\";\nimport forecastSelectors from \"../../selectors/forecast\";\n\nimport HomeView from \"./window\";\n\nclass Home extends Component {\n  componentDidMount() {\n    const { getForecast } = this.props;\n    getForecast();\n  }\n\n  render() {\n    const { forecast, toggleDisplayUnits, onChangePage } = this.props;\n\n    return (\n      <HomeView\n        forecast={forecast}\n        toggleDisplayUnits={toggleDisplayUnits}\n        onChangePage={onChangePage}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  forecast: forecastSelectors.getForecastProcessed(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getForecast: () => dispatch(forecastActions.getForecast()),\n  toggleDisplayUnits: () => dispatch(forecastActions.toggleDisplayUnits()),\n  onChangePage: (page) => dispatch(forecastActions.changePage(page)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}